# Cursor Rules for Subliminal Meditation App

## Code Quality Standards
- Follow PEP 8 style guide for Python code
- Use type hints in Python functions
- Maintain consistent code formatting
- Keep functions focused and single-purpose
- Maximum line length: 100 characters
- Use meaningful variable and function names

### Python Code Structure Rules
- Use consistent indentation (4 spaces)
- Ensure proper code block nesting
- Never place code after a return statement in the same block
- Define variables before using them
- Use blank lines to separate logical code sections
- Validate variable scope and accessibility
- Avoid unreachable code
- Add descriptive comments for complex logic
- Use early returns to reduce nesting

## Documentation
- Keep README up to date
- Document all functions and classes
- Include usage examples
- Document environment variables
- Maintain changelog
- Follow standard documentation order:
  1. Project introduction and features
  2. Installation and setup
  3. Usage and configuration
  4. Development guidelines
  5. Changelog
  6. Contributing (always at the end)
  7. License (always the last section)

## OpenAI Integration
- Initialize OpenAI client with httpx configuration:
  ```python
  client = OpenAI(
      api_key=os.getenv('OPENAI_API_KEY'),
      http_client=httpx.Client(
          base_url="https://api.openai.com/v1",
          timeout=60.0,
      )
  )
  ```
- Always use python-dotenv to load environment variables
- Set appropriate timeouts for API calls
- Handle API errors gracefully
- Log API errors without exposing sensitive data

## Security Standards
- No hardcoded secrets or credentials
- Use environment variables for sensitive data
- Run CodeQL analysis before commits
- Follow OWASP security guidelines
- Implement proper input validation
- Use secure session management
- Enable CORS with appropriate restrictions

## Git Practices
- Use conventional commit messages
- No secrets in commit history
- Run pre-commit hooks for:
  - Code style fixes
  - Line ending normalization
  - File permission checks
  - Secrets detection
  - CodeQL analysis
  - Pylint checks

## Testing
- Write unit tests for new features
- Maintain test coverage
- Test security measures
- Test error handling

## Frontend Standards
- Use Bootstrap for responsive design
- Implement dark/light theme
- Ensure mobile-friendly layout
- Follow accessibility guidelines
- Use semantic HTML

## Automation
- Automatic style fixes in pre-commit
- Automatic line ending fixes
- Automatic file permission fixes
- Automated CodeQL analysis
- Automated dependency updates

## Dependencies
- Keep dependencies up to date
- Use specific version numbers
- Document dependency purposes
- Regular security audits

## Error Handling
- Proper exception handling
- User-friendly error messages
- Logging of errors
- No sensitive data in logs

## Performance
- Optimize database queries
- Minimize API calls
- Use caching where appropriate
- Optimize frontend assets 