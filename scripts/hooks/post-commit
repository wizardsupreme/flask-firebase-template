#!/usr/bin/env python3

import os
import sys
import subprocess
from pathlib import Path

def get_last_commit_message():
    result = subprocess.run(['git', 'log', '-1', '--pretty=%B'], capture_output=True, text=True, check=True)
    return result.stdout.strip()

def is_conventional_commit(message):
    prefixes = ['feat', 'fix', 'docs', 'style', 'refactor', 'perf', 'test', 'build', 'ci', 'chore', 'revert']
    first_line = message.split('\n')[0]
    return any(first_line.startswith(f"{prefix}:") or first_line.startswith(f"{prefix}(") for prefix in prefixes)

def should_bump_version(message):
    # Bump version for feat, fix, and perf changes
    first_line = message.split('\n')[0]
    return any(first_line.startswith(f"{prefix}:") or first_line.startswith(f"{prefix}(") 
              for prefix in ['feat', 'fix', 'perf'])

def main():
    try:
        # Get the last commit message
        commit_message = get_last_commit_message()
        
        if not is_conventional_commit(commit_message):
            print("Not a conventional commit, skipping version bump and changelog update")
            return
            
        # Only bump version and update changelog for feature, fix, and performance changes
        if should_bump_version(commit_message):
            # Run version management script
            version_script = str(Path(__file__).parent.parent / 'manage_version.py')
            subprocess.run([sys.executable, version_script, 'bump'], check=True)
            
        # Always update changelog for conventional commits
        changelog_script = str(Path(__file__).parent.parent / 'generate_changelog.py')
        subprocess.run([sys.executable, changelog_script], check=True)
        
        print("âœ¨ Successfully updated version and changelog")
        
    except subprocess.CalledProcessError as e:
        print(f"Error running post-commit hook: {e}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"Unexpected error in post-commit hook: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == '__main__':
    main() 