#!/usr/bin/env python3
"""
Git commit-msg hook to enforce conventional commit messages.
Installation: Copy to .git/hooks/commit-msg and make executable
"""
import sys
import re
from typing import Optional

# Conventional commit types
TYPES = {
    'feat': 'New feature',
    'fix': 'Bug fix',
    'docs': 'Documentation change',
    'style': 'Code style change (formatting, missing semi colons, etc)',
    'refactor': 'Code refactoring',
    'perf': 'Performance improvement',
    'test': 'Adding missing tests',
    'build': 'Build system changes',
    'ci': 'CI configuration changes',
    'chore': 'Chores/maintenance tasks',
    'revert': 'Revert a previous commit'
}

def validate_commit_message(message: str) -> Optional[str]:
    """
    Validate the commit message against conventional commit format.
    Returns error message if invalid, None if valid.
    """
    # Skip merge commits
    if message.startswith('Merge'):
        return None

    # Pattern for conventional commits
    pattern = r'^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\([a-z-]+\))?: .+'

    if not re.match(pattern, message):
        return f"""
Invalid commit message format: "{message}"

Please use conventional commit format:
    <type>[optional scope]: <description>

Available types:
{chr(10).join(f'    {t}: {desc}' for t, desc in TYPES.items())}

Examples:
    feat: add user authentication
    fix(auth): handle expired tokens
    docs(readme): update installation steps
    style: format with black
"""
    return None

def main():
    """Main function to validate commit message."""
    commit_msg_file = sys.argv[1]
    with open(commit_msg_file, 'r', encoding='utf-8', newline='\n') as f:
        commit_msg = f.read().strip().split('\n')[0]

    error = validate_commit_message(commit_msg)
    if error:
        print(error)
        sys.exit(1)

if __name__ == '__main__':
     main()
